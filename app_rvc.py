#%cd SoniTranslate
import numpy as np
import gradio as gr
import whisperx
from whisperx.utils import LANGUAGES as LANG_TRANSCRIPT
from whisperx.alignment import DEFAULT_ALIGN_MODELS_TORCH as DAMT, DEFAULT_ALIGN_MODELS_HF as DAMHF
from IPython.utils import capture
import torch
from gtts import gTTS
import librosa
import edge_tts
import asyncio
import gc
from pydub import AudioSegment
from tqdm import tqdm
from deep_translator import GoogleTranslator
import os
from soni_translate.audio_segments import create_translated_audio
from soni_translate.text_to_speech import make_voice_gradio
from soni_translate.translate_segments import translate_text
import time
import shutil
from urllib.parse import unquote
import zipfile
import rarfile
import logging
logging.getLogger("numba").setLevel(logging.WARNING)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("markdown_it").setLevel(logging.WARNING)


title = "<center><strong><font size='7'>üìΩÔ∏è SoniTranslate üà∑Ô∏è</font></strong></center>"

news = """ ## üìñ –ù–æ–≤–æ—Å—Ç–∏
        üî• 2023/07/26: –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–º–µ—à–∏–≤–∞–Ω–∏—è.

        üî• 2023/07/27: –§–∏–∫—Å –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞–≥–æ–≤.

        üî• 2023/08/01: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –æ–ø—Ü–∏–π.

        üî• 2023/08/02: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —è–∑—ã–∫–æ–≤. üåê

        üî• 2023/08/03: –ò–∑–º–µ–Ω–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ –¥–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ –∑–∞–≥—Ä—É–∑–æ–∫..
        """

description = """
### üé• **–õ–µ–≥–∫–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é SoniTranslate!** üìΩÔ∏è

–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ –¥–∞–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ. üìΩÔ∏è **–ü–æ–ª—É—á–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–ª–æ–∫–Ω–æ—Ç –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: [SoniTranslate](https://github.com/R3gm/SoniTranslate)!**

–°–º. –≤–∫–ª–∞–¥–∫—É —Å –Ω–∞–¥–ø–∏—Å—å—é `–ü–æ–º–æ—â—å` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –æ —Ç–æ–º, –∫–∞–∫ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å. –ù–∞—á–Ω–µ–º —Ä–∞–∑–≤–ª–µ–∫–∞—Ç—å—Å—è —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –≤–∏–¥–µ–æ! üöÄüéâ
"""



tutorial = """

# üî∞ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:**

1. üì§ **–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ** –Ω–∞ –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–µ –∏–ª–∏ üåê **–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ** –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–∫–ª–∞–¥–∫–µ.

2. üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ **–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–∏–¥–µ–æ**.

3. üó£Ô∏è –£–∫–∞–∂–∏—Ç–µ **–Ω–æ–º–µ—Ä —Å–ø–∏–∫–µ—Ä–∞** –≤ –≤–∏–¥–µ–æ –∏ **–Ω–∞–∑–Ω–∞—á—å—Ç–µ –∫–∞–∂–¥–æ–º—É –≥–æ–ª–æ—Å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å** –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —è–∑—ã–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞.

4. üöÄ –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É'**Translate**' –∏ –∂–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.


# üé§ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RVC –∏ RVC2 –º–æ–¥–µ–ª–∏ üé∂

–¶–µ–ª—å —Å–æ—Å—Ç–æ–∏—Ç –≤ —Ç–æ–º, —á—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å RVC (Retrieval-based Voice Conversion) –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É TTS (Text-to-Speech) üéôÔ∏è

1. –í–æ –≤–∫–ª–∞–¥–∫–µ `–ö–∞—Å—Ç–æ–º–Ω–∞—è –º–æ–¥–µ–ª—å RVC`, —Å–∫–∞—á–∞–π—Ç–µ –Ω—É–∂–Ω—ã–µ –≤–∞–º –º–æ–¥–µ–ª–∏. üì• –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ —Å Hugging Face –∏ Google Drive –≤ —Ç–∞–∫–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö, –∫–∞–∫ zip, pth –∏–ª–∏ index. –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–µ space —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ HF, –Ω–æ —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ –æ—á–µ–Ω—å —Å—Ç–∞–±–∏–ª–µ–Ω üòï

2. –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ `–ó–∞–º–µ–Ω–∏—Ç—å –≤–æ–π—Å: TTS –≤ RVC` –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –æ–Ω–∞ `–≤–∫–ª—é—á–µ–Ω–∞` ‚úÖ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫ –∫–∞–∂–¥–æ–º—É TTS. üë©‚Äçü¶∞üë®‚Äçü¶±üë©‚Äçü¶≥üë®‚Äçü¶≤

3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–µ—Ç–æ–¥ F0, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –∫–æ –≤—Å–µ–º RVC. üéõÔ∏è

4. –ù–∞–∂–º–∏—Ç–µ `–ü–†–ò–ú–ï–ù–ò–¢–¨ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Æ` —á—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è üîÑ

5. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ –≤–∫–ª–∞–¥–∫—É –ø–µ—Ä–µ–≤–æ–¥–∞ –≤–∏–¥–µ–æ –∏ –Ω–∞–∂–º–∏—Ç–µ 'Translate' ‚ñ∂Ô∏è –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–≤–æ–¥ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RVC. üó£Ô∏è

–°–æ–≤–µ—Ç: –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ¬´–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RVC¬ª, —á—Ç–æ–±—ã –ø–æ—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–µ TTS –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫ RVC. üß™üîç

"""



# –ø—Ä–æ–≤–µ—Ä–∫–∞ GPU
if torch.cuda.is_available():
    device = "cuda"
    list_compute_type = ['float16', 'float32']
    compute_type_default = 'float16'
    whisper_model_default = 'large-v2'
else:
    device = "cpu"
    list_compute_type = ['float32']
    compute_type_default = 'float32'
    whisper_model_default = 'medium'
print('–†–∞–±–æ—Ç–∞—é –Ω–∞: ', device)

list_tts = ['af-ZA-AdriNeural-Female', 'af-ZA-WillemNeural-Male', 'am-ET-AmehaNeural-Male', 'am-ET-MekdesNeural-Female', 'ar-AE-FatimaNeural-Female', 'ar-AE-HamdanNeural-Male', 'ar-BH-AliNeural-Male', 'ar-BH-LailaNeural-Female', 'ar-DZ-AminaNeural-Female', 'ar-DZ-IsmaelNeural-Male', 'ar-EG-SalmaNeural-Female', 'ar-EG-ShakirNeural-Male', 'ar-IQ-BasselNeural-Male', 'ar-IQ-RanaNeural-Female', 'ar-JO-SanaNeural-Female', 'ar-JO-TaimNeural-Male', 'ar-KW-FahedNeural-Male', 'ar-KW-NouraNeural-Female', 'ar-LB-LaylaNeural-Female', 'ar-LB-RamiNeural-Male', 'ar-LY-ImanNeural-Female', 'ar-LY-OmarNeural-Male', 'ar-MA-JamalNeural-Male', 'ar-MA-MounaNeural-Female', 'ar-OM-AbdullahNeural-Male', 'ar-OM-AyshaNeural-Female', 'ar-QA-AmalNeural-Female', 'ar-QA-MoazNeural-Male', 'ar-SA-HamedNeural-Male', 'ar-SA-ZariyahNeural-Female', 'ar-SY-AmanyNeural-Female', 'ar-SY-LaithNeural-Male', 'ar-TN-HediNeural-Male', 'ar-TN-ReemNeural-Female', 'ar-YE-MaryamNeural-Female', 'ar-YE-SalehNeural-Male', 'az-AZ-BabekNeural-Male', 'az-AZ-BanuNeural-Female', 'bg-BG-BorislavNeural-Male', 'bg-BG-KalinaNeural-Female', 'bn-BD-NabanitaNeural-Female', 'bn-BD-PradeepNeural-Male', 'bn-IN-BashkarNeural-Male', 'bn-IN-TanishaaNeural-Female', 'bs-BA-GoranNeural-Male', 'bs-BA-VesnaNeural-Female', 'ca-ES-EnricNeural-Male', 'ca-ES-JoanaNeural-Female', 'cs-CZ-AntoninNeural-Male', 'cs-CZ-VlastaNeural-Female', 'cy-GB-AledNeural-Male', 'cy-GB-NiaNeural-Female', 'da-DK-ChristelNeural-Female', 'da-DK-JeppeNeural-Male', 'de-AT-IngridNeural-Female', 'de-AT-JonasNeural-Male', 'de-CH-JanNeural-Male', 'de-CH-LeniNeural-Female', 'de-DE-AmalaNeural-Female', 'de-DE-ConradNeural-Male', 'de-DE-KatjaNeural-Female', 'de-DE-KillianNeural-Male', 'el-GR-AthinaNeural-Female', 'el-GR-NestorasNeural-Male', 'en-AU-NatashaNeural-Female', 'en-AU-WilliamNeural-Male', 'en-CA-ClaraNeural-Female', 'en-CA-LiamNeural-Male', 'en-GB-LibbyNeural-Female', 'en-GB-MaisieNeural-Female', 'en-GB-RyanNeural-Male', 'en-GB-SoniaNeural-Female', 'en-GB-ThomasNeural-Male', 'en-HK-SamNeural-Male', 'en-HK-YanNeural-Female', 'en-IE-ConnorNeural-Male', 'en-IE-EmilyNeural-Female', 'en-IN-NeerjaExpressiveNeural-Female', 'en-IN-NeerjaNeural-Female', 'en-IN-PrabhatNeural-Male', 'en-KE-AsiliaNeural-Female', 'en-KE-ChilembaNeural-Male', 'en-NG-AbeoNeural-Male', 'en-NG-EzinneNeural-Female', 'en-NZ-MitchellNeural-Male', 'en-NZ-MollyNeural-Female', 'en-PH-JamesNeural-Male', 'en-PH-RosaNeural-Female', 'en-SG-LunaNeural-Female', 'en-SG-WayneNeural-Male', 'en-TZ-ElimuNeural-Male', 'en-TZ-ImaniNeural-Female', 'en-US-AnaNeural-Female', 'en-US-AriaNeural-Female', 'en-US-ChristopherNeural-Male', 'en-US-EricNeural-Male', 'en-US-GuyNeural-Male', 'en-US-JennyNeural-Female', 'en-US-MichelleNeural-Female', 'en-US-RogerNeural-Male', 'en-US-SteffanNeural-Male', 'en-ZA-LeahNeural-Female', 'en-ZA-LukeNeural-Male', 'es-AR-ElenaNeural-Female', 'es-AR-TomasNeural-Male', 'es-BO-MarceloNeural-Male', 'es-BO-SofiaNeural-Female', 'es-CL-CatalinaNeural-Female', 'es-CL-LorenzoNeural-Male', 'es-CO-GonzaloNeural-Male', 'es-CO-SalomeNeural-Female', 'es-CR-JuanNeural-Male', 'es-CR-MariaNeural-Female', 'es-CU-BelkysNeural-Female', 'es-CU-ManuelNeural-Male', 'es-DO-EmilioNeural-Male', 'es-DO-RamonaNeural-Female', 'es-EC-AndreaNeural-Female', 'es-EC-LuisNeural-Male', 'es-ES-AlvaroNeural-Male', 'es-ES-ElviraNeural-Female', 'es-GQ-JavierNeural-Male', 'es-GQ-TeresaNeural-Female', 'es-GT-AndresNeural-Male', 'es-GT-MartaNeural-Female', 'es-HN-CarlosNeural-Male', 'es-HN-KarlaNeural-Female', 'es-MX-DaliaNeural-Female', 'es-MX-JorgeNeural-Male', 'es-NI-FedericoNeural-Male', 'es-NI-YolandaNeural-Female', 'es-PA-MargaritaNeural-Female', 'es-PA-RobertoNeural-Male', 'es-PE-AlexNeural-Male', 'es-PE-CamilaNeural-Female', 'es-PR-KarinaNeural-Female', 'es-PR-VictorNeural-Male', 'es-PY-MarioNeural-Male', 'es-PY-TaniaNeural-Female', 'es-SV-LorenaNeural-Female', 'es-SV-RodrigoNeural-Male', 'es-US-AlonsoNeural-Male', 'es-US-PalomaNeural-Female', 'es-UY-MateoNeural-Male', 'es-UY-ValentinaNeural-Female', 'es-VE-PaolaNeural-Female', 'es-VE-SebastianNeural-Male', 'et-EE-AnuNeural-Female', 'et-EE-KertNeural-Male', 'fa-IR-DilaraNeural-Female', 'fa-IR-FaridNeural-Male', 'fi-FI-HarriNeural-Male', 'fi-FI-NooraNeural-Female', 'fil-PH-AngeloNeural-Male', 'fil-PH-BlessicaNeural-Female', 'fr-BE-CharlineNeural-Female', 'fr-BE-GerardNeural-Male', 'fr-CA-AntoineNeural-Male', 'fr-CA-JeanNeural-Male', 'fr-CA-SylvieNeural-Female', 'fr-CH-ArianeNeural-Female', 'fr-CH-FabriceNeural-Male', 'fr-FR-DeniseNeural-Female', 'fr-FR-EloiseNeural-Female', 'fr-FR-HenriNeural-Male', 'ga-IE-ColmNeural-Male', 'ga-IE-OrlaNeural-Female', 'gl-ES-RoiNeural-Male', 'gl-ES-SabelaNeural-Female', 'gu-IN-DhwaniNeural-Female', 'gu-IN-NiranjanNeural-Male', 'he-IL-AvriNeural-Male', 'he-IL-HilaNeural-Female', 'hi-IN-MadhurNeural-Male', 'hi-IN-SwaraNeural-Female', 'hr-HR-GabrijelaNeural-Female', 'hr-HR-SreckoNeural-Male', 'hu-HU-NoemiNeural-Female', 'hu-HU-TamasNeural-Male', 'id-ID-ArdiNeural-Male', 'id-ID-GadisNeural-Female', 'is-IS-GudrunNeural-Female', 'is-IS-GunnarNeural-Male', 'it-IT-DiegoNeural-Male', 'it-IT-ElsaNeural-Female', 'it-IT-IsabellaNeural-Female', 'ja-JP-KeitaNeural-Male', 'ja-JP-NanamiNeural-Female', 'jv-ID-DimasNeural-Male', 'jv-ID-SitiNeural-Female', 'ka-GE-EkaNeural-Female', 'ka-GE-GiorgiNeural-Male', 'kk-KZ-AigulNeural-Female', 'kk-KZ-DauletNeural-Male', 'km-KH-PisethNeural-Male', 'km-KH-SreymomNeural-Female', 'kn-IN-GaganNeural-Male', 'kn-IN-SapnaNeural-Female', 'ko-KR-InJoonNeural-Male', 'ko-KR-SunHiNeural-Female', 'lo-LA-ChanthavongNeural-Male', 'lo-LA-KeomanyNeural-Female', 'lt-LT-LeonasNeural-Male', 'lt-LT-OnaNeural-Female', 'lv-LV-EveritaNeural-Female', 'lv-LV-NilsNeural-Male', 'mk-MK-AleksandarNeural-Male', 'mk-MK-MarijaNeural-Female', 'ml-IN-MidhunNeural-Male', 'ml-IN-SobhanaNeural-Female', 'mn-MN-BataaNeural-Male', 'mn-MN-YesuiNeural-Female', 'mr-IN-AarohiNeural-Female', 'mr-IN-ManoharNeural-Male', 'ms-MY-OsmanNeural-Male', 'ms-MY-YasminNeural-Female', 'mt-MT-GraceNeural-Female', 'mt-MT-JosephNeural-Male', 'my-MM-NilarNeural-Female', 'my-MM-ThihaNeural-Male', 'nb-NO-FinnNeural-Male', 'nb-NO-PernilleNeural-Female', 'ne-NP-HemkalaNeural-Female', 'ne-NP-SagarNeural-Male', 'nl-BE-ArnaudNeural-Male', 'nl-BE-DenaNeural-Female', 'nl-NL-ColetteNeural-Female', 'nl-NL-FennaNeural-Female', 'nl-NL-MaartenNeural-Male', 'pl-PL-MarekNeural-Male', 'pl-PL-ZofiaNeural-Female', 'ps-AF-GulNawazNeural-Male', 'ps-AF-LatifaNeural-Female', 'pt-BR-AntonioNeural-Male', 'pt-BR-FranciscaNeural-Female', 'pt-PT-DuarteNeural-Male', 'pt-PT-RaquelNeural-Female', 'ro-RO-AlinaNeural-Female', 'ro-RO-EmilNeural-Male', 'ru-RU-DmitryNeural-Male', 'ru-RU-SvetlanaNeural-Female', 'si-LK-SameeraNeural-Male', 'si-LK-ThiliniNeural-Female', 'sk-SK-LukasNeural-Male', 'sk-SK-ViktoriaNeural-Female', 'sl-SI-PetraNeural-Female', 'sl-SI-RokNeural-Male', 'so-SO-MuuseNeural-Male', 'so-SO-UbaxNeural-Female', 'sq-AL-AnilaNeural-Female', 'sq-AL-IlirNeural-Male', 'sr-RS-NicholasNeural-Male', 'sr-RS-SophieNeural-Female', 'su-ID-JajangNeural-Male', 'su-ID-TutiNeural-Female', 'sv-SE-MattiasNeural-Male', 'sv-SE-SofieNeural-Female', 'sw-KE-RafikiNeural-Male', 'sw-KE-ZuriNeural-Female', 'sw-TZ-DaudiNeural-Male', 'sw-TZ-RehemaNeural-Female', 'ta-IN-PallaviNeural-Female', 'ta-IN-ValluvarNeural-Male', 'ta-LK-KumarNeural-Male', 'ta-LK-SaranyaNeural-Female', 'ta-MY-KaniNeural-Female', 'ta-MY-SuryaNeural-Male', 'ta-SG-AnbuNeural-Male', 'ta-SG-VenbaNeural-Female', 'te-IN-MohanNeural-Male', 'te-IN-ShrutiNeural-Female', 'th-TH-NiwatNeural-Male', 'th-TH-PremwadeeNeural-Female', 'tr-TR-AhmetNeural-Male', 'tr-TR-EmelNeural-Female', 'uk-UA-OstapNeural-Male', 'uk-UA-PolinaNeural-Female', 'ur-IN-GulNeural-Female', 'ur-IN-SalmanNeural-Male', 'ur-PK-AsadNeural-Male', 'ur-PK-UzmaNeural-Female', 'uz-UZ-MadinaNeural-Female', 'uz-UZ-SardorNeural-Male', 'vi-VN-HoaiMyNeural-Female', 'vi-VN-NamMinhNeural-Male', 'zh-CN-XiaoxiaoNeural-Female', 'zh-CN-XiaoyiNeural-Female', 'zh-CN-YunjianNeural-Male', 'zh-CN-YunxiNeural-Male', 'zh-CN-YunxiaNeural-Male', 'zh-CN-YunyangNeural-Male', 'zh-CN-liaoning-XiaobeiNeural-Female', 'zh-CN-shaanxi-XiaoniNeural-Female']

### –≥–æ–ª–æ—Å–∞
with capture.capture_output() as cap:
    os.system('mkdir downloads')
    os.system('mkdir logs')
    os.system('mkdir weights')
    os.system('mkdir downloads')
    del cap


def print_tree_directory(root_dir, indent=''):
    if not os.path.exists(root_dir):
        print(f"{indent}–ù–µ—Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–ª–∏ —Ñ–∞–π–ª: {root_dir}")
        return

    items = os.listdir(root_dir)

    for index, item in enumerate(sorted(items)):
        item_path = os.path.join(root_dir, item)
        is_last_item = index == len(items) - 1

        if os.path.isfile(item_path) and item_path.endswith('.zip'):
            with zipfile.ZipFile(item_path, 'r') as zip_file:
                print(f"{indent}{'‚îî‚îÄ‚îÄ' if is_last_item else '‚îú‚îÄ‚îÄ'} {item} (zip file)")
                zip_contents = zip_file.namelist()
                for zip_item in sorted(zip_contents):
                    print(f"{indent}{'    ' if is_last_item else '‚îÇ   '}{zip_item}")
        else:
            print(f"{indent}{'‚îî‚îÄ‚îÄ' if is_last_item else '‚îú‚îÄ‚îÄ'} {item}")

            if os.path.isdir(item_path):
                new_indent = indent + ('    ' if is_last_item else '‚îÇ   ')
                print_tree_directory(item_path, new_indent)


def upload_model_list():
    weight_root = "weights"
    models = []
    for name in os.listdir(weight_root):
        if name.endswith(".pth"):
            models.append(name)

    index_root = "logs"
    index_paths = []
    for name in os.listdir(index_root):
        if name.endswith(".index"):
            index_paths.append("logs/"+name)

    print(models, index_paths)
    return models, index_paths

def manual_download(url, dst):
    token = os.getenv("YOUR_HF_TOKEN")
    user_header = f"\"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: —Å –ø–æ–º–æ—â—å—é {token}\""

    if 'drive.google' in url:
        print("–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∏—Å–∫")
        if 'folders' in url:
            print("folder")
            os.system(f'gdown --folder "{url}" -O {dst} --fuzzy -c')
        else:
            print("single")
            os.system(f'gdown "{url}" -O {dst} --fuzzy -c')
    elif 'huggingface' in url:
        print("HuggingFace link")
        if '/blob/' in url or '/resolve/' in url:
          if '/blob/' in url:
              url = url.replace('/blob/', '/resolve/')
          #parsed_link = '\n{}\n\tout={}'.format(url, unquote(url.split('/')[-1]))
          #os.system(f'echo -e "{parsed_link}" | aria2c --header={user_header} --console-log-level=error --summary-interval=10 -i- -j5 -x16 -s16 -k1M -c -d "{dst}"')
          os.system(f"wget -P {dst} {url}")
        else:
          os.system(f"git clone {url} {dst+'repo/'}")
    elif 'http' in url or 'magnet' in url:
        parsed_link = '"{}"'.format(url)
        os.system(f'aria2c --optimize-concurrent-downloads --console-log-level=error --summary-interval=10 -j5 -x16 -s16 -k1M -c -d {dst} -Z {parsed_link}')


def download_list(text_downloads):
    try:
      urls = [elem.strip() for elem in text_downloads.split(',')]
    except:
      return '–°—Å—ã–ª–∫–∞ –Ω–µ—Ä–∞–±–æ—á–∞—è!'

    os.system('mkdir downloads')
    os.system('mkdir logs')
    os.system('mkdir weights')
    path_download = "downloads/"
    for url in urls:
      manual_download(url, path_download)
    
    # Tree
    print('####################################')
    print_tree_directory("downloads", indent='')
    print('####################################')

    # Place files
    select_zip_and_rar_files("downloads/")

    models, _ = upload_model_list()
    os.system("rm -rf downloads/repo")

    return f"–°–∫–∞—á–∞–Ω–æ = {models}"


def select_zip_and_rar_files(directory_path="downloads/"):
    #filter
    zip_files = []
    rar_files = []

    for file_name in os.listdir(directory_path):
        if file_name.endswith(".zip"):
            zip_files.append(file_name)
        elif file_name.endswith(".rar"):
            rar_files.append(file_name)

    # extract
    for file_name in zip_files:
        file_path = os.path.join(directory_path, file_name)
        with zipfile.ZipFile(file_path, 'r') as zip_ref:
            zip_ref.extractall(directory_path)

    for file_name in rar_files:
        file_path = os.path.join(directory_path, file_name)
        with rarfile.RarFile(file_path, 'r') as rar_ref:
            rar_ref.extractall(directory_path)

    # set in path
    def move_files_with_extension(src_dir, extension, destination_dir):
        for root, _, files in os.walk(src_dir):
            for file_name in files:
                if file_name.endswith(extension):
                    source_file = os.path.join(root, file_name)
                    destination = os.path.join(destination_dir, file_name)
                    shutil.move(source_file, destination)

    move_files_with_extension(directory_path, ".index", "logs/")
    move_files_with_extension(directory_path, ".pth", "weights/")

    return '–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'

def custom_model_voice_enable(enable_custom_voice):
    if enable_custom_voice:
      os.environ["VOICES_MODELS"] = 'ENABLE'
    else:
      os.environ["VOICES_MODELS"] = 'DISABLE'


models, index_paths = upload_model_list()

f0_methods_voice = ["pm", "harvest", "crepe", "rmvpe"]


from voice_main import ClassVoices
voices = ClassVoices()

'''
def translate_from_video(video, WHISPER_MODEL_SIZE, batch_size, compute_type,
                         TRANSLATE_AUDIO_TO, min_speakers, max_speakers,
                         tts_voice00, tts_voice01,tts_voice02,tts_voice03,tts_voice04,tts_voice05):

    YOUR_HF_TOKEN = os.getenv("My_hf_token")

    create_translated_audio(result_diarize, audio_files, Output_name_file)

    os.system("rm audio_dub_stereo.wav")
    os.system("ffmpeg -i audio_dub_solo.wav -ac 1 audio_dub_stereo.wav")

    os.system(f"rm {mix_audio}")
    os.system(f'ffmpeg -y -i audio.wav -i audio_dub_stereo.wav -filter_complex "[0:0]volume=0.15[a];[1:0]volume=1.90[b];[a][b]amix=inputs=2:duration=longest" -c:a libmp3lame {mix_audio}')

    os.system(f"rm {video_output}")
    os.system(f"ffmpeg -i {OutputFile} -i {mix_audio} -c:v copy -c:a copy -map 0:v -map 1:a -shortest {video_output}")

    return video_output
'''

def translate_from_video(
    video,
    YOUR_HF_TOKEN,
    preview=False,
    WHISPER_MODEL_SIZE="large-v1",
    batch_size=16,
    compute_type="float16",
    SOURCE_LANGUAGE= "Automatic detection",
    TRANSLATE_AUDIO_TO="English (en)",
    min_speakers=1,
    max_speakers=2,
    tts_voice00="en-AU-WilliamNeural-Male",
    tts_voice01="en-CA-ClaraNeural-Female",
    tts_voice02="en-GB-ThomasNeural-Male",
    tts_voice03="en-GB-SoniaNeural-Female",
    tts_voice04="en-NZ-MitchellNeural-Male",
    tts_voice05="en-GB-MaisieNeural-Female",
    video_output="video_dub.mp4",
    AUDIO_MIX_METHOD='Adjusting volumes and mixing audio',
    progress=gr.Progress(),
    ):

    if YOUR_HF_TOKEN == "" or YOUR_HF_TOKEN == None:
      YOUR_HF_TOKEN = os.getenv("YOUR_HF_TOKEN")
      if YOUR_HF_TOKEN == None:
        print('–¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π')
        return "–¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π"
      else:
        os.environ["YOUR_HF_TOKEN"] = YOUR_HF_TOKEN

    video = video if isinstance(video, str) else video.name
    print(video)

    if "SET_LIMIT" == os.getenv("DEMO"):
      preview=True
      print("–î–µ–º–æ-–≤–µ—Ä—Å–∏—è; –ø–æ—Å—Ç–∞–≤—å preview=True; –ì–µ–Ω–µ—Ä–∞—Ü–∏—è **–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ 10 —Å–µ–∫—É–Ω–¥–∞–º–∏**, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –æ—à–∏–±–∫–∏ –¶–ü. –ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä, —É –≤–∞—Å –Ω–µ –±—É–¥–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ —ç—Ç–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.")
      AUDIO_MIX_METHOD='Adjusting volumes and mixing audio'
      print("–î–µ–º–æ-–≤–µ—Ä—Å–∏—è; –ø–æ—Å—Ç–∞–≤—å Adjusting volumes –∏ mixing audio")
      WHISPER_MODEL_SIZE="medium"
      print("–î–µ–º–æ-–≤–µ—Ä—Å–∏—è; –ø–æ—Å—Ç–∞–≤—å whisper –º–æ–¥–µ–ª—å –Ω–∞ medium")

    LANGUAGES = {
        'Automatic detection': 'Automatic detection',
        'Arabic (ar)': 'ar',
        'Chinese (zh)': 'zh',
        'Czech (cs)': 'cs',
        'Danish (da)': 'da',
        'Dutch (nl)': 'nl',
        'English (en)': 'en',
        'Finnish (fi)': 'fi',
        'French (fr)': 'fr',
        'German (de)': 'de',
        'Greek (el)': 'el',
        'Hebrew (he)': 'he',
        'Hungarian (hu)': 'hu',
        'Italian (it)': 'it',
        'Japanese (ja)': 'ja',
        'Korean (ko)': 'ko',
        'Persian (fa)': 'fa',
        'Polish (pl)': 'pl',
        'Portuguese (pt)': 'pt',
        'Russian (ru)': 'ru',
        'Spanish (es)': 'es',
        'Turkish (tr)': 'tr',
        'Ukrainian (uk)': 'uk',
        'Urdu (ur)': 'ur',
        'Vietnamese (vi)': 'vi',
        'Hindi (hi)': 'hi',
    }

    TRANSLATE_AUDIO_TO = LANGUAGES[TRANSLATE_AUDIO_TO]
    SOURCE_LANGUAGE = LANGUAGES[SOURCE_LANGUAGE]


    if not os.path.exists('audio'):
        os.makedirs('audio')

    if not os.path.exists('audio2/audio'):
        os.makedirs('audio2/audio')

    # Check GPU
    device = "cuda" if torch.cuda.is_available() else "cpu"
    compute_type = "float32" if device == "cpu" else compute_type

    OutputFile = 'Video.mp4'
    audio_wav = "audio.wav"
    Output_name_file = "audio_dub_solo.ogg"
    mix_audio = "audio_mix.mp3"

    os.system("rm Video.mp4")
    os.system("rm audio.webm")
    os.system("rm audio.wav")

    progress(0.15, desc="Processing video...")
    if os.path.exists(video):
        if preview:
            print('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é –≤–∏–¥–µ–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é 10 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å —ç—Ç—É –æ–ø—Ü–∏—é, –∑–∞–π–¥–∏—Ç–µ –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –æ—Ç–∫–ª—é—á–∏—Ç–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä.')
            os.system(f'ffmpeg -y -i "{video}" -ss 00:00:20 -t 00:00:10 -c:v libx264 -c:a aac -strict experimental Video.mp4')
        else:
            # Check if the file ends with ".mp4" extension
            if video.endswith(".mp4"):
                destination_path = os.path.join(os.getcwd(), "Video.mp4")
                shutil.copy(video, destination_path)
            else:
                print("–§–∞–π–ª –Ω–µ –∏–º–µ–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è ¬´.mp4¬ª. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ.")
                os.system(f'ffmpeg -y -i "{video}" -c:v libx264 -c:a aac -strict experimental Video.mp4')

        for i in range (120):
            time.sleep(1)
            print('–ü—Ä–æ—Ü–µ—Å—Å —Å –≤–∏–¥–µ–æ...')
            if os.path.exists(OutputFile):
                time.sleep(1)
                os.system("ffmpeg -y -i Video.mp4 -vn -acodec pcm_s16le -ar 44100 -ac 2 audio.wav")
                time.sleep(1)
                break
            if i == 119:
              print('–û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–∏–¥–µ–æ')
              return

        for i in range (120):
            time.sleep(1)
            print('–ü—Ä–æ—Ü–µ—Å—Å —Å –∞—É–¥–∏–æ...')
            if os.path.exists(audio_wav):
                break
            if i == 119:
              print("–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ")
              return

    else:
        if preview:
            print('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é –ø–æ —Å—Å—ã–ª–∫–µ, 10 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å —ç—Ç—É –æ–ø—Ü–∏—é, –∑–∞–π–¥–∏—Ç–µ –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –æ—Ç–∫–ª—é—á–∏—Ç–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä.')
            #https://github.com/yt-dlp/yt-dlp/issues/2220
            mp4_ = f'yt-dlp -f "mp4" --downloader ffmpeg --downloader-args "ffmpeg_i: -ss 00:00:20 -t 00:00:10" --force-overwrites --max-downloads 1 --no-warnings --no-abort-on-error --ignore-no-formats-error --restrict-filenames -o {OutputFile} {video}'
            wav_ = "ffmpeg -y -i Video.mp4 -vn -acodec pcm_s16le -ar 44100 -ac 2 audio.wav"
            os.system(mp4_)
            os.system(wav_)
        else:
            mp4_ = f'yt-dlp -f "mp4" --force-overwrites --max-downloads 1 --no-warnings --no-abort-on-error --ignore-no-formats-error --restrict-filenames -o {OutputFile} {video}'
            wav_ = f'python -m yt_dlp --output {audio_wav} --force-overwrites --max-downloads 1 --no-warnings --no-abort-on-error --ignore-no-formats-error --extract-audio --audio-format wav {video}'

            os.system(wav_)

            for i in range (120):
                time.sleep(1)
                print('–ü—Ä–æ—Ü–µ—Å—Å —Å –∞—É–¥–∏–æ...')
                if os.path.exists(audio_wav) and not os.path.exists('audio.webm'):
                    time.sleep(1)
                    os.system(mp4_)
                    break
                if i == 119:
                  print('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ')
                  return

    print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∞–π–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    progress(0.30, desc="–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è...")

    SOURCE_LANGUAGE = None if SOURCE_LANGUAGE == 'Automatic detection' else SOURCE_LANGUAGE

    # 1. Transcribe with original whisper (batched)
    with capture.capture_output() as cap:
      model = whisperx.load_model(
          WHISPER_MODEL_SIZE,
          device,
          compute_type=compute_type,
          language= SOURCE_LANGUAGE,
          )
      del cap
    audio = whisperx.load_audio(audio_wav)
    result = model.transcribe(audio, batch_size=batch_size)
    gc.collect(); torch.cuda.empty_cache(); del model
    print("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    

    # 2. Align whisper output
    progress(0.45, desc="Aligning...")
    DAMHF.update(DAMT) #lang align
    EXTRA_ALIGN = {
        "hi": "theainerd/Wav2Vec2-large-xlsr-hindi"
    } # add new align models here
    #print(result['language'], DAM.keys(), EXTRA_ALIGN.keys())
    if not result['language'] in DAMHF.keys() and not result['language'] in EXTRA_ALIGN.keys():
        audio = result = None
        print("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: –∏—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º.")
        print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–π —è–∑—ã–∫ {result['language']} –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —ç—Ç–æ–π –æ—à–∏–±–∫–∏.")
        return

    model_a, metadata = whisperx.load_align_model(
        language_code=result["language"],
        device=device,
        model_name = None if result["language"] in DAMHF.keys() else EXTRA_ALIGN[result["language"]]
        )
    result = whisperx.align(
        result["segments"],
        model_a,
        metadata,
        audio,
        device,
        return_char_alignments=True,
        )
    gc.collect(); torch.cuda.empty_cache(); del model_a
    print("–í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

    if result['segments'] == []:
        print('–í –∞—É–¥–∏–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–µ—á–∏')
        return

    # 3. Assign speaker labels
    progress(0.60, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞...")
    with capture.capture_output() as cap:
      diarize_model = whisperx.DiarizationPipeline(use_auth_token=YOUR_HF_TOKEN, device=device)
      del cap
    diarize_segments = diarize_model(
        audio_wav,
        min_speakers=min_speakers,
        max_speakers=max_speakers)
    result_diarize = whisperx.assign_word_speakers(diarize_segments, result)
    gc.collect(); torch.cuda.empty_cache(); del diarize_model
    print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    progress(0.75, desc="–ü–µ—Ä–µ–≤–æ–¥...")
    if TRANSLATE_AUDIO_TO == "zh":
        TRANSLATE_AUDIO_TO = "zh-CN"
    if TRANSLATE_AUDIO_TO == "he":
        TRANSLATE_AUDIO_TO = "iw"
    result_diarize['segments'] = translate_text(result_diarize['segments'], TRANSLATE_AUDIO_TO)
    print("–ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω")

    progress(0.85, desc="Text_to_speech...")
    audio_files = []
    speakers_list = []

    # Mapping speakers to voice variables
    speaker_to_voice = {
        'SPEAKER_00': tts_voice00,
        'SPEAKER_01': tts_voice01,
        'SPEAKER_02': tts_voice02,
        'SPEAKER_03': tts_voice03,
        'SPEAKER_04': tts_voice04,
        'SPEAKER_05': tts_voice05
    }

    for segment in tqdm(result_diarize['segments']):

        text = segment['text']
        start = segment['start']
        end = segment['end']

        try:
            speaker = segment['speaker']
        except KeyError:
            segment['speaker'] = "SPEAKER_99"
            speaker = segment['speaker']
            print(f"–°–ø–∏–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —ç—Ç–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ: –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π TTS –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–æ –≤—Ä–µ–º—è —Å–µ–≥–º–µ–Ω—Ç–∞ {segment['start'], segment['text']}")

        # make the tts audio
        filename = f"audio/{start}.ogg"

        if speaker in speaker_to_voice and speaker_to_voice[speaker] != 'None':
            make_voice_gradio(text, speaker_to_voice[speaker], filename, TRANSLATE_AUDIO_TO)
        elif speaker == "SPEAKER_99":
            try:
                tts = gTTS(text, lang=TRANSLATE_AUDIO_TO)
                tts.save(filename)
                print('–ò—Å–ø–æ–ª—å–∑—É—é GTTS')
            except:
                tts = gTTS('a', lang=TRANSLATE_AUDIO_TO)
                tts.save(filename)
                print('–û—à–∏–±–∫–∞: –ê—É–¥–∏–æ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–æ.')

        # duration
        duration_true = end - start
        duration_tts = librosa.get_duration(filename=filename)

        # porcentaje
        porcentaje = duration_tts / duration_true

        if porcentaje > 2.1:
            porcentaje = 2.1
        elif porcentaje <= 1.2 and porcentaje >= 0.8:
            porcentaje = 1.0
        elif porcentaje <= 0.79:
            porcentaje = 0.8

        # Smoth and round
        porcentaje = round(porcentaje+0.0, 1)

        # apply aceleration or opposite to the audio file in audio2 folder
        os.system(f"ffmpeg -y -loglevel panic -i {filename} -filter:a atempo={porcentaje} audio2/{filename}")

        duration_create = librosa.get_duration(filename=f"audio2/{filename}")
        audio_files.append(filename)
        speakers_list.append(speaker)

    # custom voice
    if os.getenv('VOICES_MODELS') == 'ENABLE':
        progress(0.90, desc="–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤...")
        voices(speakers_list, audio_files)

    # replace files with the accelerates
    os.system("mv -f audio2/audio/*.ogg audio/")

    os.system(f"rm {Output_name_file}")

    progress(0.95, desc="–°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ...")

    create_translated_audio(result_diarize, audio_files, Output_name_file)

    os.system(f"rm {mix_audio}")

    # TYPE MIX AUDIO
    if AUDIO_MIX_METHOD == 'Adjusting volumes and mixing audio':
        # volume mix
        os.system(f'ffmpeg -y -i {audio_wav} -i {Output_name_file} -filter_complex "[0:0]volume=0.15[a];[1:0]volume=1.90[b];[a][b]amix=inputs=2:duration=longest" -c:a libmp3lame {mix_audio}')
    else:
        try:
            # background mix
            os.system(f'ffmpeg -i {audio_wav} -i {Output_name_file} -filter_complex "[1:a]asplit=2[sc][mix];[0:a][sc]sidechaincompress=threshold=0.003:ratio=20[bg]; [bg][mix]amerge[final]" -map [final] {mix_audio}')
        except:
            # volume mix except
            os.system(f'ffmpeg -y -i {audio_wav} -i {Output_name_file} -filter_complex "[0:0]volume=0.25[a];[1:0]volume=1.80[b];[a][b]amix=inputs=2:duration=longest" -c:a libmp3lame {mix_audio}')

    os.system(f"rm {video_output}")
    os.system(f"ffmpeg -i {OutputFile} -i {mix_audio} -c:v copy -c:a copy -map 0:v -map 1:a -shortest {video_output}")

    return video_output

import sys

class Logger:
    def __init__(self, filename):
        self.terminal = sys.stdout
        self.log = open(filename, "w")

    def write(self, message):
        self.terminal.write(message)
        self.log.write(message)

    def flush(self):
        self.terminal.flush()
        self.log.flush()

    def isatty(self):
        return False

sys.stdout = Logger("output.log")

def read_logs():
    sys.stdout.flush()
    with open("output.log", "r") as f:
        return f.read()

def submit_file_func(file):
    print(file.name)
    return file.name, file.name

# max tts
MAX_TTS = 6

theme='Taithrah/Minimal'

with gr.Blocks(theme=theme) as demo:
    gr.Markdown(title)
    gr.Markdown(description)

#### video
    with gr.Tab("–ê—É–¥–∏–æ–ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –≤–∏–¥–µ–æ"):
        with gr.Row():
            with gr.Column():
                #video_input = gr.UploadButton("Click to Upload a video", file_types=["video"], file_count="single") #gr.Video() # height=300,width=300
                video_input = gr.File(label="VIDEO")
                #link = gr.HTML()
                #video_input.change(submit_file_func, video_input, [video_input, link], show_progress='full')

                SOURCE_LANGUAGE = gr.Dropdown(['Automatic detection', 'Arabic (ar)', 'Chinese (zh)', 'Czech (cs)', 'Danish (da)', 'Dutch (nl)', 'English (en)', 'Finnish (fi)', 'French (fr)', 'German (de)', 'Greek (el)', 'Hebrew (he)', 'Hindi (hi)', 'Hungarian (hu)', 'Italian (it)', 'Japanese (ja)', 'Korean (ko)', 'Persian (fa)', 'Polish (pl)', 'Portuguese (pt)', 'Russian (ru)', 'Spanish (es)', 'Turkish (tr)', 'Ukrainian (uk)', 'Urdu (ur)', 'Vietnamese (vi)'], value='Automatic detection',label = 'Source language', info="This is the original language of the video")
                TRANSLATE_AUDIO_TO = gr.Dropdown(['Arabic (ar)', 'Chinese (zh)', 'Czech (cs)', 'Danish (da)', 'Dutch (nl)', 'English (en)', 'Finnish (fi)', 'French (fr)', 'German (de)', 'Greek (el)', 'Hebrew (he)', 'Hindi (hi)', 'Hungarian (hu)', 'Italian (it)', 'Japanese (ja)', 'Korean (ko)', 'Persian (fa)', 'Polish (pl)', 'Portuguese (pt)', 'Russian (ru)', 'Spanish (es)', 'Turkish (tr)', 'Ukrainian (uk)', 'Urdu (ur)', 'Vietnamese (vi)'], value='English (en)',label = 'Translate audio to', info="Select the target language, and make sure to select the language corresponding to the speakers of the target language to avoid errors in the process.")

                line_ = gr.HTML("<hr></h2>")
                gr.Markdown("–í—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –≥–æ–≤–æ—Ä—è—Ç –≤ –≤–∏–¥–µ–æ.")
                min_speakers = gr.Slider(1, MAX_TTS, default=1, label="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ —Å–ø–∏–∫–µ—Ä–æ–≤", step=1, visible=False)
                max_speakers = gr.Slider(1, MAX_TTS, value=2, step=1, label="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–ø–∏–∫–µ—Ä–æ–≤", interative=True)
                gr.Markdown("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≥–æ–ª–æ—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞.")
                def submit(value):
                    visibility_dict = {
                        f'tts_voice{i:02d}': gr.update(visible=i < value) for i in range(6)
                    }
                    return [value for value in visibility_dict.values()]
                tts_voice00 = gr.Dropdown(list_tts, value='en-AU-WilliamNeural-Male', label = 'TTS –°–ø–∏–∫–µ—Ä 1', visible=True, interactive= True)
                tts_voice01 = gr.Dropdown(list_tts, value='en-CA-ClaraNeural-Female', label = 'TTS –°–ø–∏–∫–µ—Ä 2', visible=True, interactive= True)
                tts_voice02 = gr.Dropdown(list_tts, value='en-GB-ThomasNeural-Male', label = 'TTS –°–ø–∏–∫–µ—Ä 3', visible=False, interactive= True)
                tts_voice03 = gr.Dropdown(list_tts, value='en-GB-SoniaNeural-Female', label = 'TTS –°–ø–∏–∫–µ—Ä 4', visible=False, interactive= True)
                tts_voice04 = gr.Dropdown(list_tts, value='en-NZ-MitchellNeural-Male', label = 'TTS –°–ø–∏–∫–µ—Ä 5', visible=False, interactive= True)
                tts_voice05 = gr.Dropdown(list_tts, value='en-GB-MaisieNeural-Female', label = 'TTS –°–ø–∏–∫–µ—Ä 6', visible=False, interactive= True)
                max_speakers.change(submit, max_speakers, [tts_voice00, tts_voice01, tts_voice02, tts_voice03, tts_voice04, tts_voice05])

                with gr.Column():
                      with gr.Accordion("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", open=False):

                          AUDIO_MIX = gr.Dropdown(['–ú–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–≤—É–∫–∞ —Å –ø–æ–º–æ—â—å—é —Å–∂–∞—Ç–∏—è –±–æ–∫–æ–≤–æ–π —Ü–µ–ø–∏', '–†–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –∏ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–≤—É–∫–∞¬ª.'], value='Adjusting volumes and mixing audio', label = 'Audio Mixing Method', info="Mix original and translated audio files to create a customized, balanced output with two available mixing modes.")

                          gr.HTML("<hr></h2>")
                          gr.Markdown("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Whisper –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
                          WHISPER_MODEL_SIZE = gr.inputs.Dropdown(['tiny', 'base', 'small', 'medium', 'large-v1', 'large-v2'], default=whisper_model_default, label="Whisper model")
                          batch_size = gr.inputs.Slider(1, 32, default=16, label="Batch size", step=1)
                          compute_type = gr.inputs.Dropdown(list_compute_type, default=compute_type_default, label="Compute type")

                          gr.HTML("<hr></h2>")
                          VIDEO_OUTPUT_NAME = gr.Textbox(label="–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞" ,value="video_output.mp4", info="–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
                          PREVIEW = gr.Checkbox(label="–ü—Ä–µ–≤—å—é", info="–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–∫—Ä–∞—â–∞–µ—Ç –≤–∏–¥–µ–æ –¥–æ 10 —Å–µ–∫—É–Ω–¥ –≤ —Ü–µ–ª—è—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫–ª—é—á–∏—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ.")

            with gr.Column(variant='compact'):
                with gr.Row():
                    video_button = gr.Button("–ü–ï–†–ï–í–ï–°–¢–ò", )
                with gr.Row():
                    video_output = gr.outputs.File(label="–°–ö–ê–ß–ê–¢–¨ –ü–ï–†–ï–í–ï–î–ï–ù–ù–û–ï –í–ò–î–ï–û") #gr.Video()

                line_ = gr.HTML("<hr></h2>")
                if os.getenv("YOUR_HF_TOKEN") == None or os.getenv("YOUR_HF_TOKEN") == "":
                  HFKEY = gr.Textbox(visible= True, label="HF Token", info="–í–∞–∂–Ω—ã–º —à–∞–≥–æ–º —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–Ω—è—Ç–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Pyannote. –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –Ω–∞ Hugging Face –∏ –ø—Ä–∏–Ω—è—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π: https://huggingface.co/pyannote/speaker-diarization –∏ https://huggingface.co/pyannote/segmentation. –ü–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π –¢–û–ö–ï–ù –∑–¥–µ—Å—å: https://hf.co/settings/tokens", placeholder="–¢–æ–∫–µ–Ω –∏–¥–µ—Ç —Å—é–¥–∞...")
                else:
                  HFKEY = gr.Textbox(visible= False, label="HF Token", info="–í–∞–∂–Ω—ã–º —à–∞–≥–æ–º —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–Ω—è—Ç–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Pyannote. –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –Ω–∞ Hugging Face –∏ –ø—Ä–∏–Ω—è—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π: https://huggingface.co/pyannote/speaker-diarization –∏ https://huggingface.co/pyannote/segmentation. –ü–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π –¢–û–ö–ï–ù –∑–¥–µ—Å—å: https://hf.co/settings/tokens", placeholder="–¢–æ–∫–µ–Ω –∏–¥–µ—Ç —Å—é–¥–∞...")

                gr.Examples(
                    examples=[
                        [
                            "./assets/Video_main.mp4",
                            "",
                            False,
                            "large-v2",
                            16,
                            "float16",
                            "Spanish (es)",
                            "English (en)",
                            1,
                            2,
                            'en-AU-WilliamNeural-Male',
                            'en-CA-ClaraNeural-Female',
                            'en-GB-ThomasNeural-Male',
                            'en-GB-SoniaNeural-Female',
                            'en-NZ-MitchellNeural-Male',
                            'en-GB-MaisieNeural-Female',
                            "video_output.mp4",
                            'Adjusting volumes and mixing audio',
                        ],
                    ],
                    fn=translate_from_video,
                    inputs=[
                    video_input,
                    HFKEY,
                    PREVIEW,
                    WHISPER_MODEL_SIZE,
                    batch_size,
                    compute_type,
                    SOURCE_LANGUAGE,
                    TRANSLATE_AUDIO_TO,
                    min_speakers,
                    max_speakers,
                    tts_voice00,
                    tts_voice01,
                    tts_voice02,
                    tts_voice03,
                    tts_voice04,
                    tts_voice05,
                    VIDEO_OUTPUT_NAME,
                    AUDIO_MIX,
                    ],
                    outputs=[video_output],
                    cache_examples=False,
                )

### link

    with gr.Tab("–ê—É–¥–∏–æ–ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ"):
        with gr.Row():
            with gr.Column():

                blink_input = gr.Textbox(label="Media link.", info="–î–µ—Ñ–æ–ª—Ç–Ω–∞—è: www.youtube.com/watch?v=dQw4w9WgXcQ", placeholder="–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç—É—Ç...")

                bSOURCE_LANGUAGE = gr.Dropdown(['–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ', 'Arabic (ar)', 'Chinese (zh)', 'Czech (cs)', 'Danish (da)', 'Dutch (nl)', 'English (en)', 'Finnish (fi)', 'French (fr)', 'German (de)', 'Greek (el)', 'Hebrew (he)', 'Hindi (hi)', 'Hungarian (hu)', 'Italian (it)', 'Japanese (ja)', 'Korean (ko)', 'Persian (fa)', 'Polish (pl)', 'Portuguese (pt)', 'Russian (ru)', 'Spanish (es)', 'Turkish (tr)', 'Ukrainian (uk)', 'Urdu (ur)', 'Vietnamese (vi)'], value='Automatic detection',label = 'Source language', info="This is the original language of the video")
                bTRANSLATE_AUDIO_TO = gr.Dropdown(['Arabic (ar)', 'Chinese (zh)', 'Czech (cs)', 'Danish (da)', 'Dutch (nl)', 'English (en)', 'Finnish (fi)', 'French (fr)', 'German (de)', 'Greek (el)', 'Hebrew (he)', 'Hindi (hi)', 'Hungarian (hu)', 'Italian (it)', 'Japanese (ja)', 'Korean (ko)', 'Persian (fa)', 'Polish (pl)', 'Portuguese (pt)', 'Russian (ru)', 'Spanish (es)', 'Turkish (tr)', 'Ukrainian (uk)', 'Urdu (ur)', 'Vietnamese (vi)'], value='English (en)',label = 'Translate audio to', info="Select the target language, and make sure to select the language corresponding to the speakers of the target language to avoid errors in the process.")

                bline_ = gr.HTML("<hr></h2>")
                gr.Markdown("–í—ã–±–µ—Ä–∏, —Å–∫–æ–ª—å–∫–æ –ª—é–¥–µ–π –≥–æ–≤–æ—Ä—è—Ç –≤ –≤–∏–¥–µ–æ.")
                bmin_speakers = gr.Slider(1, MAX_TTS, default=1, label="min_speakers", step=1, visible=False)
                bmax_speakers = gr.Slider(1, MAX_TTS, value=2, step=1, label="Max speakers", interative=True)
                gr.Markdown("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≥–æ–ª–æ—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞.")
                def bsubmit(value):
                    visibility_dict = {
                        f'btts_voice{i:02d}': gr.update(visible=i < value) for i in range(6)
                    }
                    return [value for value in visibility_dict.values()]
                btts_voice00 = gr.Dropdown(list_tts, value='en-AU-WilliamNeural-Male', label = 'TTS Speaker 1', visible=True, interactive= True)
                btts_voice01 = gr.Dropdown(list_tts, value='en-CA-ClaraNeural-Female', label = 'TTS Speaker 2', visible=True, interactive= True)
                btts_voice02 = gr.Dropdown(list_tts, value='en-GB-ThomasNeural-Male', label = 'TTS Speaker 3', visible=False, interactive= True)
                btts_voice03 = gr.Dropdown(list_tts, value='en-GB-SoniaNeural-Female', label = 'TTS Speaker 4', visible=False, interactive= True)
                btts_voice04 = gr.Dropdown(list_tts, value='en-NZ-MitchellNeural-Male', label = 'TTS Speaker 5', visible=False, interactive= True)
                btts_voice05 = gr.Dropdown(list_tts, value='en-GB-MaisieNeural-Female', label = 'TTS Speaker 6', visible=False, interactive= True)
                bmax_speakers.change(bsubmit, bmax_speakers, [btts_voice00, btts_voice01, btts_voice02, btts_voice03, btts_voice04, btts_voice05])


                with gr.Column():
                      with gr.Accordion("Advanced Settings", open=False):

                          bAUDIO_MIX = gr.Dropdown(['Mixing audio with sidechain compression', 'Adjusting volumes and mixing audio'], value='Adjusting volumes and mixing audio', label = 'Audio Mixing Method', info="–°–º–µ—à–∞–π—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –¥–≤—É–º—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è.")

                          gr.HTML("<hr></h2>")
                          gr.Markdown("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Whisper –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
                          bWHISPER_MODEL_SIZE = gr.inputs.Dropdown(['tiny', 'base', 'small', 'medium', 'large-v1', 'large-v2'], default=whisper_model_default, label="Whisper model")
                          bbatch_size = gr.inputs.Slider(1, 32, default=16, label="Batch size", step=1)
                          bcompute_type = gr.inputs.Dropdown(list_compute_type, default=compute_type_default, label="Compute type")

                          gr.HTML("<hr></h2>")
                          bVIDEO_OUTPUT_NAME = gr.Textbox(label="–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞" ,value="video_output.mp4", info="The name of the output file")
                          bPREVIEW = gr.Checkbox(label="–ü—Ä–µ–≤—å—é", info="–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–∫—Ä–∞—â–∞–µ—Ç –≤–∏–¥–µ–æ –¥–æ 10 —Å–µ–∫—É–Ω–¥ –≤ —Ü–µ–ª—è—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫–ª—é—á–∏—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ.")

            with gr.Column(variant='compact'):
                with gr.Row():
                    text_button = gr.Button("–ü–ï–†–ï–í–û–î")
                with gr.Row():
                    blink_output = gr.outputs.File(label="–°–ö–ê–ß–ê–¢–¨ –ü–ï–†–ï–í–ï–î–ï–ù–ù–û–ï –í–ò–î–ï–û") # gr.Video()


                bline_ = gr.HTML("<hr></h2>")
                if os.getenv("YOUR_HF_TOKEN") == None or os.getenv("YOUR_HF_TOKEN") == "":
                  bHFKEY = gr.Textbox(visible= True, label="HF Token", info="–í–∞–∂–Ω—ã–º —à–∞–≥–æ–º —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–Ω—è—Ç–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Pyannote. –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –Ω–∞ Hugging Face –∏ –ø—Ä–∏–Ω—è—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π: https://huggingface.co/pyannote/speaker-diarization –∏ https://huggingface.co/pyannote/segmentation. –ü–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π –¢–û–ö–ï–ù –∑–¥–µ—Å—å: https://hf.co/settings/tokens", placeholder="–¢–æ–∫–µ–Ω –∏–¥–µ—Ç —Å—é–¥–∞...")
                else:
                  bHFKEY = gr.Textbox(visible= False, label="HF Token", info="–í–∞–∂–Ω—ã–º —à–∞–≥–æ–º —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–Ω—è—Ç–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Pyannote. –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –Ω–∞ Hugging Face –∏ –ø—Ä–∏–Ω—è—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π: https://huggingface.co/pyannote/speaker-diarization –∏ https://huggingface.co/pyannote/segmentation. –ü–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π –¢–û–ö–ï–ù –∑–¥–µ—Å—å: https://hf.co/settings/tokens", placeholder="–¢–æ–∫–µ–Ω –∏–¥–µ—Ç —Å—é–¥–∞...")

                gr.Examples(
                    examples=[
                        [
                            "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
                            "",
                            False,
                            "large-v2",
                            16,
                            "float16",
                            "Japanese (ja)",
                            "English (en)",
                            1,
                            2,
                            'en-CA-ClaraNeural-Female',
                            'en-AU-WilliamNeural-Male',
                            'en-GB-ThomasNeural-Male',
                            'en-GB-SoniaNeural-Female',
                            'en-NZ-MitchellNeural-Male',
                            'en-GB-MaisieNeural-Female',
                            "video_output.mp4",
                            'Adjusting volumes and mixing audio',
                        ],
                    ],
                    fn=translate_from_video,
                    inputs=[
                    blink_input,
                    bHFKEY,
                    bPREVIEW,
                    bWHISPER_MODEL_SIZE,
                    bbatch_size,
                    bcompute_type,
                    bSOURCE_LANGUAGE,
                    bTRANSLATE_AUDIO_TO,
                    bmin_speakers,
                    bmax_speakers,
                    btts_voice00,
                    btts_voice01,
                    btts_voice02,
                    btts_voice03,
                    btts_voice04,
                    btts_voice05,
                    bVIDEO_OUTPUT_NAME,
                    bAUDIO_MIX
                    ],
                    outputs=[blink_output],
                    cache_examples=False,
                )


    with gr.Tab("–ö–∞—Å—Ç–æ–º–Ω—ã–π –≥–æ–ª–æ—Å –ø—Ä–∏ –ø–æ–º–æ—â–∏ RVC"):
        with gr.Column():
          with gr.Accordion("–ü–æ–ª—É—á–∏—Ç—å RVC –º–æ–¥–µ–ª–∏", open=True):
            url_links = gr.Textbox(label="–°—Å—ã–ª–∫–∏", value="",info="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–π—Ç–µ –º–æ–¥–µ–ª–∏ RVC –ø–æ URL-–∞–¥—Ä–µ—Å—É. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ —Å HuggingFace –∏–ª–∏ Drive, –∞ —Ç–∞–∫–∂–µ –≤–∫–ª—é—á–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–∑–¥–µ–ª–µ–Ω–∞ –∑–∞–ø—è—Ç–æ–π. –ü—Ä–∏–º–µ—Ä: https://huggingface.co/sail-rvc/yoimiya-jp/blob/main/model.pth, https://huggingface.co/sail-rvc/yoimiya-jp/blob/main/model.index", placeholder="–°—Å—ã–ª–æ—á–∫–∏ –≤ —Å–∏–±–∏—Ä—å —Ç—É—Ç...", lines=1)
            download_finish = gr.HTML()
            download_button = gr.Button("–°–ö–ê–ß–ê–¢–¨ –ú–û–î–ï–õ–¨")

            def update_models():
              models, index_paths = upload_model_list()
              for i in range(8):                      
                dict_models = {
                    f'model_voice_path{i:02d}': gr.update(choices=models) for i in range(8)
                }
                dict_index = {
                    f'file_index2_{i:02d}': gr.update(choices=index_paths) for i in range(8)
                }
                dict_changes = {**dict_models, **dict_index}
                return [value for value in dict_changes.values()]

        with gr.Column():
          with gr.Accordion("–ó–∞–º–µ–Ω–∞ –≤–æ–π—Å–∞: TTS –≤ RVC", open=False):
            with gr.Column(variant='compact'):
              with gr.Column():
                gr.Markdown("### 1. –ß—Ç–æ–±—ã —Ä–∞–∑—Ä–µ—à–∏—Ç—å –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –æ—Ç–º–µ—Ç—å—Ç–µ –µ–≥–æ –∫–∞–∫ –≤–∫–ª—é—á–µ–Ω–Ω—ã–π.")
                enable_custom_voice = gr.Checkbox(label="–í–ö–õ–Æ–ß–ï–ù–ù–´–ô", info="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–ª–∞–∂–æ–∫, —á—Ç–æ–±—ã —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π.")
                enable_custom_voice.change(custom_model_voice_enable, [enable_custom_voice], [])

                gr.Markdown("### 2. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –∫ –∫–∞–∂–¥–æ–º—É TTS –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å–ø–∏–∫–µ—Ä–∞, –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
                gr.Markdown('–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, —Å–∫–æ–ª—å–∫–æ —Å–ø–∏–∫–µ—Ä–æ–≤ TTS –≤—ã –±—É–¥–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –∫–∞–∂–¥–æ–º—É –∏–∑ –Ω–∏—Ö –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–≤–æ—è –º–æ–¥–µ–ª—å. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π, –µ—Å–ª–∏ –ø–æ –∫–∞–∫–∏–º-—Ç–æ –ø—Ä–∏—á–∏–Ω–∞–º —Å–ø–∏–∫–µ—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.')
                gr.Markdown("–ì–æ–ª–æ—Å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫ –ø–µ—Ä–≤–æ–º—É –≥–æ–≤–æ—Ä—è—â–µ–º—É.")
                with gr.Row():
                  model_voice_path00 = gr.Dropdown(models, label = '–ú–æ–¥–µ–ª—å-1', visible=True, interactive= True)
                  file_index2_00 = gr.Dropdown(index_paths, label = '–ò–Ω–¥–µ–∫—Å-1', visible=True, interactive= True)
                  name_transpose00 = gr.Number(label = '–¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ-1', value=0, visible=True, interactive= True)
                gr.HTML("<hr></h2>")
                gr.Markdown("–ì–æ–ª–æ—Å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ –≤—Ç–æ—Ä–æ–º—É —Å–ø–∏–∫–µ—Ä—É.")
                with gr.Row():
                  model_voice_path01 = gr.Dropdown(models, label='–ú–æ–¥–µ–ª—å-2', visible=True, interactive=True)
                  file_index2_01 = gr.Dropdown(index_paths, label='–ò–Ω–¥–µ–∫—Å-2', visible=True, interactive=True)
                  name_transpose01 = gr.Number(label='–¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ-2', value=0, visible=True, interactive=True)
                gr.HTML("<hr></h2>")
                gr.Markdown("–ì–æ–ª–æ—Å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫ —Ç—Ä–µ—Ç—å–µ–º—É —Å–ø–∏–∫–µ—Ä—É")
                with gr.Row():
                  model_voice_path02 = gr.Dropdown(models, label='–ú–æ–¥–µ–ª—å-3', visible=True, interactive=True)
                  file_index2_02 = gr.Dropdown(index_paths, label='–ò–Ω–¥–µ–∫—Å-3', visible=True, interactive=True)
                  name_transpose02 = gr.Number(label='–¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ-3', value=0, visible=True, interactive=True)
                gr.HTML("<hr></h2>")
                gr.Markdown("–ì–æ–ª–æ—Å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫ —á–µ—Ç–≤–µ—Ä—Ç–æ–º—É —Å–ø–∏–∫–µ—Ä—É.")
                with gr.Row():
                  model_voice_path03 = gr.Dropdown(models, label='–ú–æ–¥–µ–ª—å-4', visible=True, interactive=True)
                  file_index2_03 = gr.Dropdown(index_paths, label='–ò–Ω–¥–µ–∫—Å-4', visible=True, interactive=True)
                  name_transpose03 = gr.Number(label='–¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ-4', value=0, visible=True, interactive=True)
                gr.HTML("<hr></h2>")
                gr.Markdown("–ì–æ–ª–æ—Å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫ –ø—è—Ç–æ–º—É —Å–ø–∏–∫–µ—Ä—É.")
                with gr.Row():
                  model_voice_path04 = gr.Dropdown(models, label='–ú–æ–¥–µ–ª—å-5', visible=True, interactive=True)
                  file_index2_04 = gr.Dropdown(index_paths, label='–ò–Ω–¥–µ–∫—Å-5', visible=True, interactive=True)
                  name_transpose04 = gr.Number(label='–¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ-5', value=0, visible=True, interactive=True)
                gr.HTML("<hr></h2>")
                gr.Markdown("V–ì–æ–ª–æ—Å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫ —à–µ—Å—Ç–æ–º—É —Å–ø–∏–∫–µ—Ä—É.")
                with gr.Row():
                  model_voice_path05 = gr.Dropdown(models, label='–ú–æ–¥–µ–ª—å-6', visible=True, interactive=True)
                  file_index2_05 = gr.Dropdown(index_paths, label='–ò–Ω–¥–µ–∫—Å-6', visible=True, interactive=True)
                  name_transpose05 = gr.Number(label='–¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ-6', value=0, visible=True, interactive=True)
                gr.HTML("<hr></h2>")
                gr.Markdown("- –ì–æ–ª–æ—Å, –ø—Ä–∏–º–µ–Ω—è–µ–º—ã–π –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≥–æ–≤–æ—Ä—è—â–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω.")
                with gr.Row():
                  model_voice_path06 = gr.Dropdown(models, label='–ú–æ–¥–µ–ª—å-Aux', visible=True, interactive=True)
                  file_index2_06 = gr.Dropdown(index_paths, label='–ò–Ω–¥–µ–∫—Å-Aux', visible=True, interactive=True)
                  name_transpose06 = gr.Number(label='–¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ-Aux', value=0, visible=True, interactive=True)
                gr.HTML("<hr></h2>")
                with gr.Row():
                  f0_method_global = gr.Dropdown(f0_methods_voice, value='pm', label = '–ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ F0', visible=True, interactive= True)

            with gr.Row(variant='compact'):
              button_config = gr.Button("–ü—Ä–∏–Ω—è—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")

              confirm_conf = gr.HTML()

            button_config.click(voices.apply_conf, inputs=[
                f0_method_global,
                model_voice_path00, name_transpose00, file_index2_00,
                model_voice_path01, name_transpose01, file_index2_01,
                model_voice_path02, name_transpose02, file_index2_02,
                model_voice_path03, name_transpose03, file_index2_03,
                model_voice_path04, name_transpose04, file_index2_04,
                model_voice_path05, name_transpose05, file_index2_05,
                model_voice_path06, name_transpose06, file_index2_06,
                ], outputs=[confirm_conf])


          with gr.Column():
                with gr.Accordion("–¢–µ—Å—Ç RVC", open=False):

                  with gr.Row(variant='compact'):
                    text_test = gr.Textbox(label="–¢–µ–∫—Å—Ç", value="This is an example",info="–Ω–∞–ø–∏—à–∏ —Å–≤–æ–π—Ç –µ–∫—Å—Ç", placeholder="...", lines=5)
                    with gr.Column(): 
                      tts_test = gr.Dropdown(list_tts, value='en-GB-ThomasNeural-Male', label = 'TTS', visible=True, interactive= True)
                      model_voice_path07 = gr.Dropdown(models, label = '–ú–æ–¥–µ–ª—å', visible=True, interactive= True) #value=''
                      file_index2_07 = gr.Dropdown(index_paths, label = '–ò–Ω–¥–µ–∫—Å', visible=True, interactive= True) #value=''
                      transpose_test = gr.Number(label = '–¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', value=0, visible=True, interactive= True, info="—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—Ç–æ–Ω–æ–≤, –ø–æ–≤—ã—à–µ–Ω–∏–µ –Ω–∞ –æ–∫—Ç–∞–≤—É: 12, –ø–æ–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞ –æ–∫—Ç–∞–≤—É: -12")
                      f0method_test = gr.Dropdown(f0_methods_voice, value='pm', label = 'F0 –º–µ—Ç–æ–¥', visible=True, interactive= True) 
                  with gr.Row(variant='compact'):
                    button_test = gr.Button("–¢–µ—Å—Ç –∞—É–¥–∏–æ")

                  with gr.Column():
                    with gr.Row():
                      original_ttsvoice = gr.Audio()
                      ttsvoice = gr.Audio()

                    button_test.click(voices.make_test, inputs=[
                        text_test,
                        tts_test,
                        model_voice_path07,
                        file_index2_07,
                        transpose_test,
                        f0method_test,
                        ], outputs=[ttsvoice, original_ttsvoice])

                download_button.click(download_list, [url_links], [download_finish]).then(update_models, [], 
                                  [
                                    model_voice_path00, model_voice_path01, model_voice_path02, model_voice_path03, model_voice_path04, model_voice_path05, model_voice_path06, model_voice_path07,
                                    file_index2_00, file_index2_01, file_index2_02, file_index2_03, file_index2_04, file_index2_05, file_index2_06, file_index2_07
                                  ])


    with gr.Tab("–ü–æ–º–æ—â—å"):
        gr.Markdown(tutorial)
        gr.Markdown(news)

    with gr.Accordion("–õ–æ–≥–∏", open = False):
        logs = gr.Textbox()
        demo.load(read_logs, None, logs, every=1)

    # run
    video_button.click(translate_from_video, inputs=[
        video_input,
        HFKEY,
        PREVIEW,
        WHISPER_MODEL_SIZE,
        batch_size,
        compute_type,
        SOURCE_LANGUAGE,
        TRANSLATE_AUDIO_TO,
        min_speakers,
        max_speakers,
        tts_voice00,
        tts_voice01,
        tts_voice02,
        tts_voice03,
        tts_voice04,
        tts_voice05,
        VIDEO_OUTPUT_NAME,
        AUDIO_MIX,
        ], outputs=video_output)
    text_button.click(translate_from_video, inputs=[
        blink_input,
        bHFKEY,
        bPREVIEW,
        bWHISPER_MODEL_SIZE,
        bbatch_size,
        bcompute_type,
        bSOURCE_LANGUAGE,
        bTRANSLATE_AUDIO_TO,
        bmin_speakers,
        bmax_speakers,
        btts_voice00,
        btts_voice01,
        btts_voice02,
        btts_voice03,
        btts_voice04,
        btts_voice05,
        bVIDEO_OUTPUT_NAME,
        bAUDIO_MIX,
        ], outputs=blink_output)

#demo.launch(debug=True, enable_queue=True)
demo.launch(share=True, enable_queue=True, quiet=True, debug=False)
